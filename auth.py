from flask import Blueprint, request, jsonify
from werkzeug.security import check_password_hash, generate_password_hash
from database import get_connection

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')  # employee_code
    password = data.get('password')

    if not username or not password:
        return jsonify({'error': 'Username and password are required'}), 400

    conn = None
    cursor = None

    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)

        # 1. Ki·ªÉm tra t√†i kho·∫£n trong b·∫£ng users
        cursor.execute("SELECT username, password_hash FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()

        if not user or not check_password_hash(user['password_hash'], password):
            return jsonify({'error': 'Invalid username or password'}), 401

        # 2. L·∫•y th√¥ng tin nh√¢n s·ª±
        cursor.execute("""
            SELECT id, entry_date, full_name, gender, employee_code, birth_date, phone,
                   position, corporation, company, factory, division, sub_division, section,
                   group_name, note, organization_unit_id
            FROM employees2026
            WHERE employee_code = %s
        """, (username,))
        employee = cursor.fetchone()

        if not employee:
            return jsonify({'error': 'Employee profile not found'}), 404

        employee_id = employee['id']

        # 3. L·∫•y vai tr√≤
        cursor.execute("""
            SELECT r.name
            FROM employee_roles er
            JOIN roles r ON er.role_id = r.id
            WHERE er.employee_id = %s
        """, (employee_id,))
        roles = [row['name'] for row in cursor.fetchall()]

        # 4. L·∫•y quy·ªÅn
        cursor.execute("""
            SELECT DISTINCT p.code
            FROM employee_roles er
            JOIN role_permissions rp ON er.role_id = rp.role_id
            JOIN permissions p ON rp.permission_id = p.id
            WHERE er.employee_id = %s
        """, (employee_id,))
        permissions = [row['code'] for row in cursor.fetchall()]

        # 5. L·∫•y t·∫•t c·∫£ ph√≤ng ban ng∆∞·ªùi n√†y qu·∫£n l√Ω
        cursor.execute("""
            SELECT id, parent_id FROM organization_units
            WHERE employee_id = %s
        """, (employee_id,))
        units = cursor.fetchall()
        managed_unit_ids = [u['id'] for u in units]

        # 6. L·ªçc ra c·∫•p cao nh·∫•t (kh√¥ng c√≥ cha n·∫±m trong danh s√°ch ƒëang qu·∫£n l√Ω)
        top_level_units = [
            u['id'] for u in units
            if u['parent_id'] not in managed_unit_ids
        ]
        managed_unit_id = top_level_units[0] if top_level_units else None  # ch·ªçn 1 c√°i duy nh·∫•t

        # 7. T·∫°o token gi·∫£ (ho·∫∑c d√πng JWT n·∫øu c√≥)
        token = generate_password_hash(username)[:32]

        # 8. Tr·∫£ k·∫øt qu·∫£
        return jsonify({
            'message': 'Login successful',
            'token': token,
            'user': {
                'id': employee['id'],
                'employee_code': employee['employee_code'],
                'full_name': employee['full_name'],
                'gender': employee['gender'],
                'birth_date': str(employee['birth_date']),
                'entry_date': str(employee['entry_date']),
                'phone': employee['phone'],
                'position': employee['position'],
                'corporation': employee['corporation'],
                'company': employee['company'],
                'factory': employee['factory'],
                'division': employee['division'],
                'sub_division': employee['sub_division'],
                'section': employee['section'],
                'group_name': employee['group_name'],
                'note': employee['note'],
                'organization_unit_id': employee['organization_unit_id'],
                'roles': roles,
                'permissions': permissions,
                'managed_organization_unit_id': managed_unit_id,              # üëà duy nh·∫•t
                'managed_organization_unit_ids': managed_unit_ids             # üëà ƒë·∫ßy ƒë·ªß (tu·ª≥ d√πng)
            }
        }), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
@auth_bp.route('/api/change-password', methods=['POST'])
def change_password():
    """
    Body JSON expected:
    {
      "username": "00001",
      "old_password": "current_plain_text_password",
      "new_password": "new_plain_text_password"
    }
    """
    data = request.get_json() or {}
    username = data.get('username')
    old_password = data.get('old_password')
    new_password = data.get('new_password')

    if not username or not old_password or not new_password:
        return jsonify({'error': 'username, old_password v√† new_password l√† b·∫Øt bu·ªôc'}), 400

    # ‚úÖ Ch·ªâ c·∫ßn t·ªëi thi·ªÉu 4 k√Ω t·ª±
    if len(new_password) < 4:
        return jsonify({'error': 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±'}), 400

    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)

        # Ki·ªÉm tra user t·ªìn t·∫°i
        cursor.execute("SELECT id, username, password_hash FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        if not user:
            return jsonify({'error': 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i'}), 404

        # Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        stored_hash = user.get('password_hash')
        if not stored_hash or not check_password_hash(stored_hash, old_password):
            return jsonify({'error': 'M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng'}), 401

        # T·∫°o hash m·ªõi (d√πng scrypt ƒë·ªÉ gi·ªØ format gi·ªëng c≈©)
        new_hash = generate_password_hash(new_password, method='scrypt')

        # ‚úÖ C·∫≠p nh·∫≠t m·∫≠t kh·∫©u (kh√¥ng c√≥ updated_at)
        cursor.execute(
            "UPDATE users SET password_hash = %s WHERE id = %s",
            (new_hash, user['id'])
        )
        conn.commit()

        return jsonify({'message': 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'}), 200

    except Exception as e:
        return jsonify({'error': str(e)}), 500

    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
@auth_bp.route('/api/admin/reset-password', methods=['POST'])
def admin_reset_password():
    """
    Body JSON expected:
    {
      "employee_id": 123,
      "new_password": "new_plain_text_password"
    }
    """
    data = request.get_json() or {}
    employee_id = data.get('employee_id')
    new_password = data.get('new_password')

    if not employee_id or not new_password:
        return jsonify({'error': 'employee_id v√† new_password l√† b·∫Øt bu·ªôc'}), 400

    # ‚úÖ Gi·ªØ quy t·∫Øc t∆∞∆°ng t·ª± endpoint change-password c·ªßa b·∫°n
    if len(new_password) < 4:
        return jsonify({'error': 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±'}), 400

    conn = None
    cursor = None
    try:
        conn = get_connection()
        cursor = conn.cursor(dictionary=True)

        # 1) T√¨m employee_code t·ª´ employees2026
        cursor.execute("""
            SELECT e.id AS employee_id, e.employee_code
            FROM employees2026 e
            WHERE e.id = %s
            LIMIT 1
        """, (employee_id,))
        emp = cursor.fetchone()
        if not emp or not emp.get('employee_code'):
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n ho·∫∑c thi·∫øu employee_code'}), 404

        employee_code = emp['employee_code']

        # 2) T√¨m user t∆∞∆°ng ·ª©ng trong b·∫£ng users (username = employee_code)
        cursor.execute("""
            SELECT u.id, u.username
            FROM users u
            WHERE u.username = %s
            LIMIT 1
        """, (employee_code,))
        user = cursor.fetchone()
        if not user:
            return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n users t∆∞∆°ng ·ª©ng v·ªõi employee_code'}), 404

        # 3) T·∫°o password hash m·ªõi (gi·ªØ method='scrypt' nh∆∞ b·∫°n ƒëang d√πng)
        new_hash = generate_password_hash(new_password, method='scrypt')

        # 4) C·∫≠p nh·∫≠t users.password_hash
        cursor.execute("""
            UPDATE users
            SET password_hash = %s
            WHERE id = %s
        """, (new_hash, user['id']))
        conn.commit()

        return jsonify({
            'message': 'Reset m·∫≠t kh·∫©u th√†nh c√¥ng',
            'username': user['username'],      # ti·ªán cho ph√≠a frontend hi·ªÉn th·ªã
            'employee_id': emp['employee_id']
        }), 200

    except Exception as e:
        # C√≥ th·ªÉ log chi ti·∫øt e ƒë·ªÉ audit
        return jsonify({'error': str(e)}), 500

    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
